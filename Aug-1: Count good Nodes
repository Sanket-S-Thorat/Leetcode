// https://leetcode.com/problems/count-good-nodes-in-binary-tree/
// https://leetcode.com/problems/count-good-nodes-in-binary-tree/discuss/2512711/Python-oror-CPP-oror-Java-oror-T.C.-%3A-O(n)-oror-S.C.-%3A-O(log-n)
// 1. Java:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

import java.lang.Math;

class Solution {
    static int solve(TreeNode num, int maxVal, int res){
        if(num != null){
            if(num.val >= maxVal)res = 1;
            else res = 0;

            maxVal = Math.max(maxVal, num.val);
        
            res += solve(num.left, maxVal, res);
            res += solve(num.right, maxVal, res);
        }
        else return 0;
        return res;
    }
    
    public int goodNodes(TreeNode root) {
        return solve(root, root.val, 0);
    }
}

// 2. CPP:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int solve(TreeNode* num, int maxVal, int res){
        if(num != nullptr){
            
            if(num -> val >= maxVal)
                res = 1;
            else
                res = 0;
            
            maxVal = max(maxVal, num ->val);
            
            res += solve(num -> left, maxVal, res);
            res += solve(num -> right, maxVal, res);
        }
        else{
            return 0;
        }
        return res;
    }
    
    
    int goodNodes(TreeNode* root) {
        return solve(root, root -> val, 0);
    }
};

##3. Python:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def goodNodes(self, root: TreeNode) -> int:
        
        def solve(num, maxVal):
            if num:
                
                res = 1 if num.val >= maxVal else 0
                maxVal = max(maxVal, num.val)
                
                res += solve(num.left, maxVal)
                res += solve(num.right, maxVal)
                
            else:
                return 0
            
            return res
        
        return solve(root, root.val)
